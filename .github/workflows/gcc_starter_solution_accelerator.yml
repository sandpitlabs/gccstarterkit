# This is a basic workflow that is manually triggered

name: GCC Starter solution accelerator workflow

# Controls when the action will run. Workflow runs when manually triggered using the UI
# or API.
on:
  workflow_dispatch:
    # Inputs the workflow accepts.
    inputs:
      ARM_CLIENT_ID:
        # Friendly description to be shown in the UI instead of 'name'
        description: 'ARM CLIENT ID'
        # Default value if no value is explicitly provided
        default: '0854efab-9245-4e7e-997c-2c6efe5140fc'
        # Input has to be provided for the workflow to run
        required: true
        # The data type of the input
        type: string
      ARM_CLIENT_SECRET:
        # Friendly description to be shown in the UI instead of 'name'
        description: 'ARM CLIENT SECRET'
        # Default value if no value is explicitly provided
        # Input has to be provided for the workflow to run
        required: true
        # The data type of the input
        type: string
      ARM_SUBSCRIPTION_ID:
        description: 'ARM SUBSCRIPTION ID'
        default: '0b5b13b8-0ad7-4552-936f-8fae87e0633f'        
        required: true        
        type: string
      ARM_TENANT_ID:
        description: 'ARM TENANT ID'
        default: 'ac20add1-ffda-45c1-adc5-16a0db15810f'
        required: true            
        type: string
      BACKEND_AZURE_STORAGE_ACCOUNT_NAME:
        description: 'STORAGE ACCOUNT NAME'
        default: 'aoaidevstgtfstateosv'
        required: true            
        type: string
      BACKEND_AZURE_RESOURCE_GROUP_NAME:
        description: 'RESOURCE GROUP NAME'
        default: 'aoaidev-rg-launchpad'
        required: true            
        type: string
        
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "greet"
  project_workflow:
    # The type of runner that the job will run on
    runs-on: self-hosted
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Runs a single command using the runners shell
    # - name: Send greeting
    #   run: echo "Hello ${{ inputs.ARM_CLIENT_ID }}"
    # - name: azure login
    #   run: |
    #     # az login --identity
    #     # login with service-principal
    #     echo "login with service-principal"
    #     az login --service-principal -u "${{ inputs.ARM_CLIENT_ID }}" -p "${{ inputs.ARM_CLIENT_SECRET }}" --tenant "${{ inputs.ARM_TENANT_ID }}" 
    #     az account set --subscription "${{ inputs.ARM_SUBSCRIPTION_ID }}"
    #     export ARM_SUBSCRIPTION_ID="${{ inputs.ARM_SUBSCRIPTION_ID }}"
    #     export ARM_TENANT_ID="${{ inputs.ARM_TENANT_ID }}"
    #     export ARM_CLIENT_ID="${{ inputs.ARM_CLIENT_ID }}"
    #     export ARM_CLIENT_SECRET="${{ inputs.ARM_CLIENT_SECRET }}"
    #     echo get current account information
    #     ACCOUNT_INFO=$(az account show 2> /dev/null)
    #     SUB_ID=$(echo "$ACCOUNT_INFO" | jq ".id" -r)
    #     SUB_NAME=$(echo "$ACCOUNT_INFO" | jq ".name" -r)
    #     echo "Subscription Id: ${SUB_ID}"
    #     echo "Subscription Name: ${SUB_NAME}"
    
    # solution accelerators
      - name: login to azure
        run: |
          az login --service-principal -u "${{ inputs.ARM_CLIENT_ID}}" -p "${{ inputs.ARM_CLIENT_SECRET }}" --tenant "${{ inputs.ARM_TENANT_ID}}"   
          az account set --subscription "${{ inputs.ARM_SUBSCRIPTION_ID}}"   
          export ARM_SUBSCRIPTION_ID="${{ inputs.ARM_SUBSCRIPTION_ID}}"
          export ARM_TENANT_ID="${{ inputs.ARM_TENANT_ID}}"
          export ARM_CLIENT_ID="${{ inputs.ARM_CLIENT_ID}}"
          export ARM_CLIENT_SECRET="${{ inputs.ARM_CLIENT_SECRET }}"       
          # add your terraform init, plan and apply below
          
      - name: container instance
        run: |  
          # login information and export ARM information MUST be in all run
          az login --service-principal -u "${{ inputs.ARM_CLIENT_ID}}" -p "${{ inputs.ARM_CLIENT_SECRET }}" --tenant "${{ inputs.ARM_TENANT_ID}}"   
          az account set --subscription "${{ inputs.ARM_SUBSCRIPTION_ID}}"
          export ARM_SUBSCRIPTION_ID="${{ inputs.ARM_SUBSCRIPTION_ID}}"
          export ARM_TENANT_ID="${{ inputs.ARM_TENANT_ID}}"
          export ARM_CLIENT_ID="${{ inputs.ARM_CLIENT_ID}}"
          export ARM_CLIENT_SECRET="${{ inputs.ARM_CLIENT_SECRET }}"              
          cd ./gcc_starter_kit/landingzone/configuration/2-solution_accelerators/project/containter_instance        
          terraform init  -reconfigure \
          -backend-config="resource_group_name=${{ inputs.BACKEND_AZURE_RESOURCE_GROUP_NAME }}" \
          -backend-config="storage_account_name=${{ inputs.BACKEND_AZURE_STORAGE_ACCOUNT_NAME}}" \
          -backend-config="container_name=2-solution-accelerators" \
          -backend-config="key=solution_accelerators-project-containerinstance.tfstate"
          terraform plan \
          -var="storage_account_name=${{ inputs.BACKEND_AZURE_STORAGE_ACCOUNT_NAME}}" \
          -var="resource_group_name=${{ inputs.BACKEND_AZURE_RESOURCE_GROUP_NAME }}"
          terraform apply -auto-approve \
          -var="storage_account_name=${{ inputs.BACKEND_AZURE_STORAGE_ACCOUNT_NAME}}" \
          -var="resource_group_name=${{ inputs.BACKEND_AZURE_RESOURCE_GROUP_NAME }}"     
          
      - name: create storage account
        run: |    
          echo login with service-principal
          az login --service-principal -u "${{ inputs.ARM_CLIENT_ID}}" -p "${{ inputs.ARM_CLIENT_SECRET }}" --tenant "${{ inputs.ARM_TENANT_ID}}"   
          az account set --subscription "${{ inputs.ARM_SUBSCRIPTION_ID}}"
          export ARM_SUBSCRIPTION_ID="${{ inputs.ARM_SUBSCRIPTION_ID}}"
          export ARM_TENANT_ID="${{ inputs.ARM_TENANT_ID}}"
          export ARM_CLIENT_ID="${{ inputs.ARM_CLIENT_ID}}"
          export ARM_CLIENT_SECRET="${{ inputs.ARM_CLIENT_SECRET }}"
          cd ./gcc_starter_kit/landingzone/configuration/2-solution_accelerators/project/storage_account
          echo performing terraform init
          terraform init  -reconfigure \
          -backend-config="resource_group_name=${{ inputs.BACKEND_AZURE_RESOURCE_GROUP_NAME }}" \
          -backend-config="storage_account_name=${{ inputs.BACKEND_AZURE_STORAGE_ACCOUNT_NAME}}" \
          -backend-config="container_name=2-solution-accelerators" \
          -backend-config="key=solution_accelerators-project-storageaccount.tfstate"
          echo performing terraform plan
          terraform plan \
          -var="storage_account_name=${{ inputs.BACKEND_AZURE_STORAGE_ACCOUNT_NAME}}" \
          -var="resource_group_name=${{ inputs.BACKEND_AZURE_RESOURCE_GROUP_NAME }}"
          echo performing terraform apply
          terraform apply -auto-approve \
          -var="storage_account_name=${{ inputs.BACKEND_AZURE_STORAGE_ACCOUNT_NAME}}" \
          -var="resource_group_name=${{ inputs.BACKEND_AZURE_RESOURCE_GROUP_NAME }}"    
          
    
