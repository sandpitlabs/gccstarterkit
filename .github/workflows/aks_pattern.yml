---
name: gcc_starter_kit_aks_pattern

# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with an API token for Terraform Cloud (app.terraform.io). On pull request events, this workflow will run
# `terraform init`, `terraform fmt`, and `terraform plan` (speculative plan via Terraform Cloud). On push events
# to the "main" branch, `terraform apply` will be executed.
#
# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform
#
# To use this workflow, you will need to complete the following setup steps.
#
# 1. Create a `main.tf` file in the root of this repository with the `remote` backend and one or more resources defined.
#   Example `main.tf`:
#     # The configuration for the `remote` backend.
#     terraform {
#       backend "remote" {
#         # The name of your Terraform Cloud organization.
#         organization = "example-organization"
#
#         # The name of the Terraform Cloud workspace to store Terraform state files in.
#         workspaces {
#           name = "example-workspace"
#         }
#       }
#     }
#
#     # An example resource that does nothing.
#     resource "null_resource" "example" {
#       triggers = {
#         value = "A example resource that does nothing!"
#       }
#     }
#
#
# 2. Generate a Terraform Cloud user API token and store it as a GitHub secret (e.g. TF_API_TOKEN) on this repository.
#   Documentation:
#     - https://www.terraform.io/docs/cloud/users-teams-organizations/api-tokens.html
#     - https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets
#
# 3. Reference the GitHub secret in step using the `hashicorp/setup-terraform` GitHub Action.
#   Example:
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v1
#       with:
#         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

on:
  workflow_dispatch:
    # Inputs the workflow accepts.
    inputs:
      ARM_CLIENT_ID:
        # Friendly description to be shown in the UI instead of 'name'
        description: 'ARM CLIENT ID'
        # Default value if no value is explicitly provided
        default: '0854efab-9245-4e7e-997c-2c6efe5140fc'
        # Input has to be provided for the workflow to run
        required: true
        # The data type of the input
        type: string
      ARM_CLIENT_SECRET:
        # Friendly description to be shown in the UI instead of 'name'
        description: 'ARM CLIENT SECRET'
        # Default value if no value is explicitly provided
        # Input has to be provided for the workflow to run
        required: true
        # The data type of the input
        type: string
      ARM_SUBSCRIPTION_ID:
        description: 'ARM SUBSCRIPTION ID'
        default: '0b5b13b8-0ad7-4552-936f-8fae87e0633f'        
        required: true        
        type: string
      ARM_TENANT_ID:
        description: 'ARM TENANT ID'
        default: 'ac20add1-ffda-45c1-adc5-16a0db15810f'
        required: true            
        type: string
      BACKEND_AZURE_STORAGE_ACCOUNT_NAME:
        description: 'STORAGE ACCOUNT NAME'
        default: 'aoaidevstgtfstateosv'
        required: true            
        type: string
      BACKEND_AZURE_RESOURCE_GROUP_NAME:
        description: 'RESOURCE GROUP NAME'
        default: 'aoaidev-rg-launchpad'
        required: true            
        type: string

permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: self-hosted
    environment: sandpit

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    # - name: Setup Terraform
    #   uses: hashicorp/setup-terraform@v1
    #   with:
    #     cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
    - name: login azure with service-principal
      run: |
        az login --service-principal -u "${{ inputs.ARM_CLIENT_ID}}" -p "${{ inputs.ARM_CLIENT_SECRET }}" --tenant "${{ inputs.ARM_TENANT_ID}}"   
        az account set --subscription "${{ inputs.ARM_SUBSCRIPTION_ID}}"

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: |
        az login --service-principal -u "${{ inputs.ARM_CLIENT_ID}}" -p "${{ inputs.ARM_CLIENT_SECRET }}" --tenant "${{ inputs.ARM_TENANT_ID}}"   
        az account set --subscription "${{ inputs.ARM_SUBSCRIPTION_ID}}"
        cd ./gcc_starter_kit/landingzone/configuration/2-solution_accelerators/project/containter_instance        
        terraform init  -reconfigure \
        -backend-config="resource_group_name=${{ inputs.BACKEND_AZURE_RESOURCE_GROUP_NAME }}" \
        -backend-config="storage_account_name=${{ inputs.BACKEND_AZURE_STORAGE_ACCOUNT_NAME}}" \
        -backend-config="container_name=2-solution-accelerators" \
        -backend-config="key=solution_accelerators-project-containerinstance.tfstate"
        
    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terraform     
    - name: Terraform Plan
      run: |
        terraform plan \
        -var="storage_account_name=${{ inputs.BACKEND_AZURE_STORAGE_ACCOUNT_NAME}}" \
        -var="resource_group_name=${{ inputs.BACKEND_AZURE_RESOURCE_GROUP_NAME }}"    

    # On push to "main", build or change infrastructure according to Terraform configuration files
    # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      # if: github.ref == 'refs/heads/"main"' && github.event_name == 'push'
      run: |
        terraform apply -auto-approve \
        -var="storage_account_name=${{ inputs.BACKEND_AZURE_STORAGE_ACCOUNT_NAME}}" \
        -var="resource_group_name=${{ inputs.BACKEND_AZURE_RESOURCE_GROUP_NAME }}"     
  
